#!/usr/bin/env bash

VERSION="0.0";

if [[ -z "$DISPLAY" ]]; then
    DISPLAY=":1";
    export DISPLAY;
fi

title="";
prompt_string="Password :: ";
description="";
keyinfo="";
repeat="";

AP_YES="Yes";
AP_NO="No";

prompt_action='dmenu -P -p "$AP_PROMPT"';
confirm_action='echo -e "$AP_YES\n$AP_NO" | dmenu -p "$AP_PROMPT"';

# :: Prompt string (default if empty)
ask_password() {
  export AP_PROMPT="${1:-"$prompt_string"}";
  echo -n '' | bash -c "$prompt_action" 2> /dev/null;
}
# :: Prompt string (default if empty)
confirm() {
  export AP_PROMPT="${1:-"$prompt_string"}";
  export AP_YES; export AP_NO;
  echo -n '' | bash -c "$confirm_action" 2> /dev/null;
}

cancelled_error() { echo "ERR 99 Operation cancelled <Unspecified source>"; }
com_error() { echo "ERR 99 Operation cancelled <Unspecified source>"; }




save_option() {
  echo "OK";
}

get_info() {
  case "$1" in
    version)  echo "D $VERSION" && echo "OK" ;;
    pid)      echo "D $BASHPID" && echo "OK" ;;
    *)        com_error ;;
  esac;
}

# :: Repeat string -> Password -> OK | ERR
password_prompt() {
  local pass="";
  if pass=$(ask_password "$([[ -z "$1" ]] && echo "$repeat")"); then
    if [[ ! -z "$1" ]]; then
      password_prompt ""  "$pass";
    else
      # If password repeat attempt failed, try again,
      # Else continue
      if [[ ! -z "$2" ]] && [[ "$pass" != "$2" ]]; then
        password_prompt "$repeat";
      else
        [[ ! -z "$pass" ]] && echo "D $pass";
        echo "OK";
      fi;
    fi;
  else
    cancelled_error;
  fi;
}

# :: OK | ERR
confirm_prompt() {
  local res=$(confirm);
  [[ "$res" == "$AP_YES" ]] && echo "OK" || cancelled_error;
}

interpret_command() {
  cmd="$(echo "$1" | cut -d' ' -f1)";
  data="$(echo "$1" | cut -d' ' -f2-)";

  # Case insensitive search
  case "${cmd^^}" in
    INIT)          echo "OK Pleased to meet you" ;;
    OPTION)        save_option "$data" ;;
    GETINFO)       get_info "$data" ;;
    SETTITLE)      title="$data" && echo "OK" ;;
    SETPROMPT)     prompt_string="$data" && echo "OK" ;;
    SETKEYINFO)    keyinfo="$data" && echo "OK" ;;
    SETREPEAT)     repeat="${data:-"repeat"}" && echo "OK" ;;
    SETDESC)       description="$data" && echo "OK" ;;
    CONFIRM)       confirm_prompt ;;
    GETPIN)        password_prompt "$repeat" "" ;;
    BYE)           echo "OK closing connection" && exit 0 ;;
    *)             echo "OK" ;;
  esac;
}




help() {
  echo "Usage: $0 [-D DISPLAY] [--prompt script] [--confirm script] [-hv]";
}

parse_cliargs() {
  [[ $# -le 0 ]] && return 0;

  case "$1" in
    -D|--display)   export DISPLAY="$2"; shift 1 ;;
    --prompt)       prompt_action="$2"; shift 1 ;;
    --confirm)      confirm_action="$2"; shift 1 ;;
    -v|--version)   echo "anypinentry-$VERSION" && exit 0 ;;
    -h|--help)      help && exit 0 ;;
    *)              help && exit 1 ;;
  esac;

  shift 1;
  parse_cliargs "$@";
}



# Main
parse_cliargs "$@";

interpret_command "INIT";

while read line; do
  interpret_command "$line";
done;

      #{ "SETREPEATERROR", cmd_setrepeaterror },
      #{ "SETERROR",   cmd_seterror },
      #{ "SETOK",      cmd_setok },
      #{ "SETNOTOK",   cmd_setnotok },
      #{ "SETCANCEL",  cmd_setcancel },
      #{ "MESSAGE",    cmd_message },
      #{ "SETQUALITYBAR", cmd_setqualitybar },
      #{ "SETQUALITYBAR_TT", cmd_setqualitybar_tt },
      #{ "SETTIMEOUT", cmd_settimeout },
      #{ "CLEARPASSPHRASE", cmd_clear_passphrase },

