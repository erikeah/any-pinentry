#!/usr/bin/env bash

VERSION="0.1";

if [[ -z "$DISPLAY" ]]; then
    DISPLAY=":1";
    export DISPLAY;
fi

title="";
prompt_string="Password :: ";
description="";
keyinfo="";
repeat="";

error__password_mismatch="Passwords don't match";
AP_YES="Yes";
AP_NO="No";

prompt_action='dmenu -P -p "$AP_PROMPT"';
confirm_action='echo -e "$AP_YES\n$AP_NO" | dmenu -p "$AP_PROMPT"';
display_error_action='notify-send -a "Pinentry" "$AP_ERROR"';

# :: Prompt string (default if empty)
ask_password() {
  export AP_PROMPT="${1:-"$prompt_string"}";
  echo -n '' | bash -c "$prompt_action" 2> /dev/null;
}
# :: Prompt string (default if empty)
confirm() {
  export AP_PROMPT="${1:-"$prompt_string"}";
  export AP_YES; export AP_NO;
  echo -n '' | bash -c "$confirm_action" 2> /dev/null;
}
# :: Error text
show_error() {
  export AP_ERROR="$1";
  bash -c "$display_error_action" 2> /dev/null;
}

cancelled_error() { echo "ERR 99 Operation cancelled <Unspecified source>"; }
com_error() { echo "ERR 99 Operation cancelled <Unspecified source>"; }




save_option() {
  echo "OK";
}

get_info() {
  case "$1" in
    version)  echo "D $VERSION" && echo "OK" ;;
    pid)      echo "D $BASHPID" && echo "OK" ;;
    *)        com_error ;;
  esac;
}

# :: Repeat string -> Password -> OK | ERR
password_prompt() {
  local pass="";
  if pass=$(ask_password "$([[ -z "$1" ]] && echo "$repeat")"); then
    if [[ ! -z "$1" ]]; then
      password_prompt ""  "$pass";
    else
      # If password repeat attempt failed, try again,
      # Else continue
      if [[ ! -z "$2" ]] && [[ "$pass" != "$2" ]]; then
        show_error "$error__password_mismatch";
        password_prompt "$repeat";
      else
        [[ ! -z "$pass" ]] && echo "D $pass";
        echo "OK";
      fi;
    fi;
  else
    cancelled_error;
  fi;
}

# :: OK | ERR
confirm_prompt() {
  local res=$(confirm);
  [[ "$res" == "$AP_YES" ]] && echo "OK" || cancelled_error;
}

interpret_command() {
  cmd="$(echo "$1" | cut -d' ' -f1)";
  data="$(echo "$1" | cut -d' ' -f2-)";

  # Case insensitive search
  case "${cmd^^}" in
    INIT)             echo "OK Pleased to meet you" ;;
    OPTION)           save_option "$data" ;;
    GETINFO)          get_info "$data" ;;
    SETTITLE)         title="$data" && echo "OK" ;;
    SETPROMPT)        prompt_string="$data" && echo "OK" ;;
    SETKEYINFO)       keyinfo="$data" && echo "OK" ;;
    SETREPEAT)        repeat="${data:-"repeat"}" && echo "OK" ;;
    SETDESC)          description="$data" && echo "OK" ;;
    SETREPEATERROR)   error__password_mismatch="$data" && echo "OK" ;;
    CONFIRM)          confirm_prompt ;;
    GETPIN)           password_prompt "$repeat" "" ;;
    BYE)              echo "OK closing connection" && exit 0 ;;
    *)                echo "OK" ;;
  esac;
}




help() {
  echo "Usage: $0 [-D DISPLAY] [--prompt script] [--confirm script] [-hv]";
}

parse_cliargs() {
  getopt -T
  if [ "$?" -ne 4 ]; then
      printf "Your version of getopt(1) is out of date\n" >&2
      exit 1
  fi

  TEMP=$(getopt -n "$0" -o dD:T:N:C:M:o:gWc:a:h \
                --long debug,display:,ttyname:,ttytype:,lc-ctype:,lc-messages:,timeout:,no-global-grab,parent-wid,colors:,ttyalert:,prompt:,confirm:,error:,help,version \
                -- "$@")

  if [ $? -ne 0 ]; then
      help
      exit 1
  fi

  eval set -- "$TEMP"
  unset TEMP

  while true; do
      case "$1" in
          -d | --debug)          shift ;;
          -D | --display)        shift 2 ;;
          -T | --ttyname)        shift 2 ;;
          -N | --ttytype)        shift 2 ;;
          -C | --lc-ctype)       shift 2 ;;
          -M | --lc-messages)    shift 2 ;;
          -o | --timeout)        shift 2 ;;
          -g | --no-global-grab) shift ;;
          -W | --parent-wid)     shift ;;
          -c | --colors)         echo "colors=$2"; shift 2 ;;
          -a | --ttyalert)       shift 2 ;;
               --error-command)  display_error_action="$2"; shift 2 ;;
               --prompt)         prompt_action="$2"; shift 2 ;;
               --confirm)        confirm_action="$2"; shift 2 ;;
          -h | --help)           help && exit 0 ;;
               --version)        echo "anypinentry-$VERSION" && exit 0 ;;
          --)                    shift; break ;;
          *)                     ;;
      esac
  done
}



# Main
parse_cliargs "$@";

interpret_command "INIT";

while read line; do
  interpret_command "$line";
done;

#  "SETERROR"
#  "SETOK"
#  "SETNOTOK"
#  "SETCANCEL"
#  "MESSAGE"
#  "SETQUALITYBAR"
#  "SETQUALITYBAR_TT"
#  "SETTIMEOUT"
#  "CLEARPASSPHRASE"

